// use std::sync::Arc;
// use image::ImageBuffer;
// use image::Rgba;
// use vulkano::buffer::BufferUsage;
// use vulkano::buffer::CpuAccessibleBuffer;
// use vulkano::command_buffer::AutoCommandBufferBuilder;
// use vulkano::command_buffer::CommandBuffer;
// use vulkano::descriptor::descriptor_set::PersistentDescriptorSet;
// use vulkano::device::Device;
// use vulkano::device::DeviceExtensions;
// use vulkano::device::Features;
// use vulkano::format::Format;
// use vulkano::image::Dimensions;
// use vulkano::image::StorageImage;
// use vulkano::image::ImmutableImage;
// use vulkano::instance::Instance;
// use vulkano::instance::InstanceExtensions;
// use vulkano::instance::PhysicalDevice;
// use vulkano::pipeline::ComputePipeline;
// use vulkano::sync::GpuFuture;

// use std::fs;
// use std::env;
// use std::time::Instant;
// use image::GenericImageView;

// const IMAGE_DIR: &str = "images/";

// fn main() -> std::io::Result<()> {
//     let instance = Instance::new(None, &InstanceExtensions::none(), None)
//         .expect("failed to create instance");

//     for physical_device in PhysicalDevice::enumerate(&instance) {
//     println!("Available device: {} (type: {:?})",
//               physical_device.name(), physical_device.ty());
//     }

//     let physical = PhysicalDevice::enumerate(&instance).next().expect("no device available");

//     let queue_family = physical.queue_families()
//         .find(|&q| q.supports_compute())
//         .expect("couldn't find a graphical queue family");

//     let mut extensions = DeviceExtensions::none();
//     extensions.khr_storage_buffer_storage_class = true;
//     let (device, mut queues) = {
//         Device::new(physical, &Features::none(), &extensions,
//                     [(queue_family, 0.5)].iter().cloned()).expect("failed to create device")
//     };

//     let queue = queues.next().unwrap();

// //     mod cs {
// //         vulkano_shaders::shader!
// //         {
// //             ty: "compute",
// //             src: "
// // #version 450
// // layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;
// // layout(set = 0, binding = 0) buffer Data {
// //     uint data[];
// // } buf;
// // void main() {
// //     uint idx = gl_GlobalInvocationID.x;
// //     buf.data[idx] /= 16;
// // }"
// //         }
// //     }

//     mod cs {
//         vulkano_shaders::shader! {
//             ty: "compute",
//             src: "
// #version 450

// layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

// layout(set = 0, binding = 0) buffer Data {
//     uint data[];
// } buf;

// void main() {
//     uint idx = gl_GlobalInvocationID.x;
//     buf.data[idx] *= 12;
// }"
//         }
//     }

//     let shader = cs::Shader::load(device.clone()).expect("failed to create shader module");

//     let compute_pipeline = Arc::new(ComputePipeline::new(device.clone(), &shader.main_entry_point(), &())
//         .expect("failed to create compute pipeline"));

//     for entry in fs::read_dir(IMAGE_DIR.to_owned() + &"/")?
//     {
//         let entry = entry?;
//         let original = image::open(entry.path()).unwrap();
//         let name = entry.file_name().into_string().unwrap();
//         println!("Name: {} | Dimensions: {:?} | Color Channels: {}", name, original.dimensions(), original.color().channel_count());
//         let w = original.dimensions().0;
//         let h = original.dimensions().1;
//         // let c = original.color().channel_count() as u32;

//         // let format = match c
//         // {
//         //     1 => Format::R8Uint,
//         //     2 => Format::R8G8Uint,
//         //     3 => Format::R8G8B8Uint,
//         //     4 => Format::R8G8B8A8Uint,
//         //     _ => panic!("unsupported number of color channels: {}", c),
//         // };

//         //let (original_gpu, original_gpu_future) = { ImmutableImage::from_iter(original.raw_pixels().into_iter(), Dimensions::Dim2d { width: w, height: h }, format, queue.clone()).unwrap() };

//         // let set = Arc::new(PersistentDescriptorSet::start(compute_pipeline.clone(), 0)
//         //     .add_image(original_gpu.clone()).unwrap()
//         //     .build().unwrap()
//         // );

//         // let raw = original.raw_pixels();
//         // let buf = CpuAccessibleBuffer::from_data(device.clone(), BufferUsage::all(), raw).expect("failed to create buffer");

//         let data_iter = 0 .. 65536;
//         let data_buffer = CpuAccessibleBuffer::from_iter(device.clone(), BufferUsage::all(),
//                                                         data_iter).expect("failed to create buffer");

//         // let set = Arc::new(PersistentDescriptorSet::start(compute_pipeline.clone(), 0)
//         //     .add_buffer(buf.clone()).unwrap()
//         //     .build().unwrap()
//         // );

//         let set = Arc::new(PersistentDescriptorSet::start(compute_pipeline.clone(), 0)
//             .add_buffer(data_buffer.clone()).unwrap()
//             .build().unwrap()
//         );

//         // let command_buffer = AutoCommandBufferBuilder::new(device.clone(), queue.family()).unwrap()
//         //     .dispatch([w * h / 64, 1, 1], compute_pipeline.clone(), set.clone(), ()).unwrap()
//         //     .build().unwrap();

//         let command_buffer = AutoCommandBufferBuilder::new(device.clone(), queue.family()).unwrap()
//             .dispatch([1024, 1, 1], compute_pipeline.clone(), set.clone(), ()).unwrap()
//             .build().unwrap();
        
//         let finished = command_buffer.execute(queue.clone()).unwrap();
//         finished.then_signal_fence_and_flush().unwrap()
//             .wait(None).unwrap();

//         let content = data_buffer.read().unwrap();
//         for (n, val) in content.iter().enumerate() {
//             assert_eq!(*val, n as u32 / 16);
//         }

//         println!("Everything succeeded!");

//         // let buffer_content = buf.read().unwrap();
//         // for (n, val) in buffer_content.iter().enumerate()
//         // {
//         //     println!("NEW: {} {} {}", n, val, original.raw_pixels() [n]);
//         // }
//         // let image = ImageBuffer::<Rgba<u8>, _>::from_raw(w, h, &buffer_content[..]).unwrap();
//         // image.save("image2.bmp").unwrap();
//     }

//     Ok(())
// }

// Copyright (c) 2017 The vulkano developers
// Licensed under the Apache License, Version 2.0
// <LICENSE-APACHE or
// http://www.apache.org/licenses/LICENSE-2.0> or the MIT
// license <LICENSE-MIT or http://opensource.org/licenses/MIT>,
// at your option. All files in the project carrying such
// notice may not be copied, modified, or distributed except
// according to those terms.

//! This example contains the source code of the fourth part of the guide at http://vulkano.rs.
//!
//! It is not commented, as the explanations can be found in the guide itself.

use std::sync::Arc;
use image::ImageBuffer;
use image::Rgba;
use vulkano::buffer::BufferUsage;
use vulkano::buffer::CpuAccessibleBuffer;
use vulkano::command_buffer::AutoCommandBufferBuilder;
use vulkano::command_buffer::CommandBuffer;
use vulkano::descriptor::descriptor_set::PersistentDescriptorSet;
use vulkano::device::Device;
use vulkano::device::DeviceExtensions;
use vulkano::device::Features;
use vulkano::format::Format;
use vulkano::image::Dimensions;
use vulkano::image::StorageImage;
use vulkano::image::ImmutableImage;
use vulkano::instance::Instance;
use vulkano::instance::InstanceExtensions;
use vulkano::instance::PhysicalDevice;
use vulkano::pipeline::ComputePipeline;
use vulkano::sync::GpuFuture;

use std::fs;
use std::env;
use std::time::Instant;
use image::GenericImageView;

const IMAGE_DIR: &str = "images/";

fn main() -> std::io::Result<()> {
    let instance = Instance::new(None, &InstanceExtensions::none(), None)
        .expect("failed to create instance");

    let physical = PhysicalDevice::enumerate(&instance).next().expect("no device available");

    let queue_family = physical.queue_families()
        .find(|&q| q.supports_graphics())
        .expect("couldn't find a graphical queue family");

    let mut features = Features::none();
    features.shader_storage_image_extended_formats = true;
    let (device, mut queues) = {
        Device::new(physical, &features, &DeviceExtensions::none(),
                    [(queue_family, 0.5)].iter().cloned()).expect("failed to create device")
    };

    let queue = queues.next().unwrap();

    mod cs {
        vulkano_shaders::shader!{
            ty: "compute",
            src: "
#version 450
layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;
layout(set = 0, binding = 0, r8) uniform readonly image2D original;
layout(set = 0, binding = 1, rgba8) uniform writeonly image2D modified;
void main() {
    vec2 norm_coordinates = (gl_GlobalInvocationID.xy + vec2(0.5)) / vec2(imageSize(modified));
    vec2 c = (norm_coordinates - vec2(0.5)) * 2.0 - vec2(1.0, 0.0);
    vec2 z = vec2(0.0, 0.0);
    float i;
    for (i = 0.0; i < 1.0; i += 0.005) {
        z = vec2(
            z.x * z.x - z.y * z.y + c.x,
            z.y * z.x + z.x * z.y + c.y
        );
        if (length(z) > 4.0) {
            break;
        }
    }
    vec4 to_write = vec4(vec3(i), 1.0);
    imageStore(modified, ivec2(gl_GlobalInvocationID.xy), to_write);
}"
        }
    }

    let shader = cs::Shader::load(device.clone()).expect("failed to create shader module");

    let compute_pipeline = Arc::new(ComputePipeline::new(device.clone(), &shader.main_entry_point(), &())
        .expect("failed to create compute pipeline"));

    for entry in fs::read_dir(IMAGE_DIR.to_owned() + &"/")?
    {
        let entry = entry?;
        let original = image::open(entry.path()).unwrap();
        let name = entry.file_name().into_string().unwrap();
        println!("Name: {} | Dimensions: {:?} | Color Channels: {}", name, original.dimensions(), original.color().channel_count());
        let w = original.dimensions().0;
        let h = original.dimensions().1;
        let c = original.color().channel_count() as u32;

        let format = match c
        {
            1 => Format::R8Uint,
            2 => Format::R8G8Uint,
            3 => Format::R8G8B8Uint,
            4 => Format::R8G8B8A8Uint,
            _ => panic!("unsupported number of color channels: {}", c),
        };

        let (original_gpu, _) = { ImmutableImage::from_iter(original.raw_pixels().into_iter(), Dimensions::Dim2d { width: w, height: h }, format, queue.clone()).unwrap() };

        let image = StorageImage::new(device.clone(), Dimensions::Dim2d { width: w, height: h },
                                  Format::R8G8B8A8Unorm, Some(queue.family())).unwrap();

        let set = Arc::new(PersistentDescriptorSet::start(compute_pipeline.clone(), 0)
            .add_image(original_gpu.clone()).unwrap()
            .add_image(image.clone()).unwrap()
            .build().unwrap()
        );

        let buf = CpuAccessibleBuffer::from_iter(device.clone(), BufferUsage::all(),
                                                (0 .. w * h * 4).map(|_| 0u8))
                                                .expect("failed to create buffer");

        let command_buffer = AutoCommandBufferBuilder::new(device.clone(), queue.family()).unwrap()
            .dispatch([w / 8, h / 8, 1], compute_pipeline.clone(), set.clone(), ()).unwrap()
            .copy_image_to_buffer(image.clone(), buf.clone()).unwrap()
            .build().unwrap();

        let finished = command_buffer.execute(queue.clone()).unwrap();
        finished.then_signal_fence_and_flush().unwrap()
            .wait(None).unwrap();

        let buffer_content = buf.read().unwrap();
        let image = ImageBuffer::<Rgba<u8>, _>::from_raw(w, h, &buffer_content[..]).unwrap();
        image.save("image2.png").unwrap();
    }

    Ok(())
}